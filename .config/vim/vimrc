" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
if &compatible
  set nocompatible
endif

call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-rooter'
Plug 'cespare/vim-toml'
Plug 'janko/vim-test'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'rhysd/git-messenger.vim'
Plug 'tpope/vim-commentary'
Plug 'https://gist.github.com/topfunky/424448',
    \ { 'as': 'topfunky-light.vim', 'do': 'mkdir -p colors; mv *.vim colors/' }
call plug#end()

" Enable file type detection.
""filetype plugin indent on
""syntax enable

set backupdir=$HOME/tmp/vim
set directory=$HOME/tmp/vim

" Disable visual error flash and the error beep
set visualbell t_vb=
set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set nojoinspaces
set hidden
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

set fileencoding=utf-8

" Keep 50 lines of command line history
set history=50
" Show the cursor position all the time
set ruler
" Display incomplete commands
set showcmd
" Do incremental searching
set incsearch

" Always show the status line (even if no split windows)
set laststatus=2

" Show options as list when switching buffers etc
set wildmenu
set wildmode=longest,full
" Patterns to ignore during file-navigation
set wildignore+=*.o,*/.git/*,*/.hg/*

" Enable mouse in all modes
set mouse=a

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax enable
  set hlsearch
endif

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("autocmd")
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType markdown setlocal wrap linebreak nolist

  " Don't write backup file if vim is being called by "crontab -e"
  autocmd BufWrite /private/tmp/crontab.* set nowritebackup
  " Don't write backup file if vim is being called by "chpass"
  autocmd BufWrite /private/etc/pw.* set nowritebackup

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " filetype plugin indent on

  " ??? Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else
  " always set autoindenting on
  set autoindent
endif

filetype on

" Filetype detection extensions
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.rc set filetype=conf

" Highlight matching parenthesis (brackets)
set showmatch

" Toggles & Switches (Leader commands)
nmap <space> <leader>
nmap <silent> <leader>l :set list!<CR>
nmap <silent> <leader>w :set wrap!<CR>
nmap <silent> <leader>n :silent :nohlsearch<CR>
"nmap <silent> <ESC><ESC> :silent :nohlsearch<CR>

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
cmap w!! %!sudo tee > /dev/null %


" Shortcuts for visual selections
nmap gV `[v`]

" Mappings for a recovering TextMate user indentation
nmap <D-[> <<
imap <D-[> <C-O><<
nmap <D-]> >>
imap <D-]> <C-O>>>
vmap <D-[> <gv
vmap <D-]> >gv

" Commenting
vmap <D-/> \\gv
map <D-/> \\\

" ctrl-a and ctrl-e move the cursor to the start and end of the line
" without leaving insert mode
" http://stackoverflow.com/questions/6926034
imap <C-a> <C-o>I
imap <C-e> <C-r>=InsCtrlE()<cr>
function! InsCtrlE()
  try
    norm! i
    return "\<C-o>A"
  catch
    return "\<C-e>"
  endtry
endfunction

" disable netrw
let g:loaded_netrw = 0

" airblade/vim-rooter
let g:rooter_patterns = ['.git']

" janko/vim-test
nnoremap <silent> tt :TestNearest<CR>
nnoremap <silent> tf :TestFile<CR>
nnoremap <silent> ts :TestSuite<CR>
let test#strategy = "vimterminal"
let test#neovim#term_position = "vertical"

" junegunn/fzf.vim
let $FZF_DEFAULT_OPTS = '--preview-window sharp:noborder'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }

function! RipgrepFzf(query, fullscreen)
  " rg uses .config/ripgrep/ripgreprc config
  let command_fmt = 'rg --column --line-number --no-heading --color=always --context=0 -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--preview-window', 'bottom:6:noborder', '--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

nnoremap <silent> <Leader><Space> :Files<CR>
nnoremap <silent> <Leader>ff :Files<CR>
nnoremap <silent> <Leader>bb :Buffers<CR>

" edit vimrc
nnoremap <leader>v :e $MYVIMRC<CR>

" moving cursor to other windows
nnoremap <silent> <leader>wk :wincmd k<CR> " up
nnoremap <silent> <leader>wj :wincmd j<CR> " down
nnoremap <silent> <leader>wh :wincmd h<CR> " left
nnoremap <silent> <leader>wl :wincmd l<CR> " right
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" splits
nnoremap <silent> <leader>wv :vsplit<CR> " vertical split
nnoremap <silent> <leader>ws :split<CR> " horizontal split
nnoremap <silent> <leader>wd :close<CR> " delete the current window
nnoremap <silent> sv :vsplit<CR> " vertical split

nnoremap <silent> <leader>bd :bd<CR> " delete the current buffer

" tpope/vim-commentary
augroup comments
  autocmd!
  autocmd FileType php setlocal commentstring=//\ %s
augroup END


" source config changes automatically
augroup source_config
  autocmd!
  autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

" delete trailing whitespaces on save
augroup trailing_whitespaces
  autocmd!
  autocmd BufWritePre * let winview=winsaveview()
    \ | keepjumps keeppatterns %s/\s\+$//e
    \ | call winrestview(winview) |unlet! winview
augroup END

menu Encoding.utf-8 :e ++enc=utf-8<CR>
menu Encoding.windows-1251 :e ++enc=cp1251<CR>

" allow cyrillic into Normal mode
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,
  \фисвуапршолдьтщзйкіыегмцчня;abcdefghijklmnopqrsstuvwxyz,
  \ХЪЖЭБЮ;{}:\\"<>,
  \хїъжєэбю;[]];''\\,.,
  \№;#

" local settings
if filereadable(glob("~/.config/vim/vimrc_local"))
  source ~/.config/vim/vimrc_local
endif
